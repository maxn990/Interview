{"ast":null,"code":"var _jsxFileName = \"/Users/maxnorman/Documents/Coding/Interview/interview/src/search.js\",\n    _s = $RefreshSig$();\n\nimport { initializeApp } from 'firebase/app';\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getDatabase, ref, onValue, get, child } from \"firebase/database\";\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SearchView = props => {\n  _s();\n\n  const [db_data, set_db_data] = useState(() => null);\n  const firebaseConfig = {\n    apiKey: \"AIzaSyAQ6USPFRL3Uqps1aqErhcNyRlO2XblHj0\",\n    authDomain: \"interview-50399.firebaseapp.com\",\n    projectId: \"interview-50399\",\n    storageBucket: \"interview-50399.appspot.com\",\n    messagingSenderId: \"503019432099\",\n    appId: \"1:503019432099:web:9394f58478b734996db716\",\n    measurementId: \"G-C8XFN5VGFS\"\n  };\n  const app = initializeApp(firebaseConfig);\n  const database = getDatabase(); // let data = []\n  // let keys = []\n  // useEffect(() => {\n  //   const dbRef = ref(getDatabase());\n  //   get(child(dbRef, '/')).then((snapshot) => {\n  //     if (snapshot.exists()) {\n  //       snapshot.forEach((item, i) => {\n  //         let name = item.val()\n  //         keys.push(name)\n  //         console.log(name)\n  //       });\n  //       for (let i=0; i < keys.length; i++) {\n  //         data.push(keys[i]['First']);\n  //       }\n  //\n  //     } else {\n  //       console.log(\"No data available\");\n  //     }\n  //   }).catch((error) => {\n  //     console.error(error);\n  //   });\n  //   console.log(keys.length)\n  //   console.log(keys)\n  // }\n\n  db_data = [];\n  useEffect(() => {\n    const dbRef = ref(getDatabase());\n    dbRef.on('value', snapshot => {\n      const data = snapshot.vals();\n      const list = [];\n\n      for (let id in data) {\n        list.push(data[id]);\n      }\n\n      console.log(data);\n      set_db_data(data);\n    });\n  }, []);\n  let options = [];\n\n  for (let i = 0; i < data.length; i++) {\n    options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n      value: data[i]['First'],\n      children: data[i]\n    }, data[i]['First'], false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 18\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      list: \"users\",\n      name: \"userSearch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: \"users\",\n      children: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchView, \"V+yEhCVvl/cNRSkuw2+Rr+9elns=\");\n\n_c = SearchView;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchView\");","map":{"version":3,"sources":["/Users/maxnorman/Documents/Coding/Interview/interview/src/search.js"],"names":["initializeApp","getAnalytics","getDatabase","ref","onValue","get","child","React","useEffect","useState","SearchView","props","db_data","set_db_data","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","database","dbRef","on","snapshot","data","vals","list","id","push","console","log","options","i","length"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,WAAT,EAAsBC,GAAtB,EAA2BC,OAA3B,EAAoCC,GAApC,EAAyCC,KAAzC,QAAqD,mBAArD;AACA,OAAOC,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;AAGA,OAAO,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAEnC,QAAM,CAACC,OAAD,EAAUC,WAAV,IAAyBJ,QAAQ,CAAC,MAAM,IAAP,CAAvC;AAEA,QAAMK,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,yCADa;AAErBC,IAAAA,UAAU,EAAE,iCAFS;AAGrBC,IAAAA,SAAS,EAAE,iBAHU;AAIrBC,IAAAA,aAAa,EAAE,6BAJM;AAKrBC,IAAAA,iBAAiB,EAAE,cALE;AAMrBC,IAAAA,KAAK,EAAE,2CANc;AAOrBC,IAAAA,aAAa,EAAE;AAPM,GAAvB;AAUA,QAAMC,GAAG,GAAGtB,aAAa,CAACc,cAAD,CAAzB;AACA,QAAMS,QAAQ,GAAGrB,WAAW,EAA5B,CAfmC,CAkBnC;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAU,EAAAA,OAAO,GAAG,EAAV;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,KAAK,GAAGrB,GAAG,CAACD,WAAW,EAAZ,CAAjB;AACAsB,IAAAA,KAAK,CAACC,EAAN,CAAS,OAAT,EAAmBC,QAAD,IAAc;AAC9B,YAAMC,IAAI,GAAGD,QAAQ,CAACE,IAAT,EAAb;AACA,YAAMC,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,EAAT,IAAeH,IAAf,EAAoB;AAClBE,QAAAA,IAAI,CAACE,IAAL,CAAUJ,IAAI,CAACG,EAAD,CAAd;AACD;;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACAd,MAAAA,WAAW,CAACc,IAAD,CAAX;AACD,KARD;AASD,GAXQ,EAWN,EAXM,CAAT;AAcA,MAAIO,OAAO,GAAG,EAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAAI,CAACS,MAAzB,EAAiCD,CAAC,EAAlC,EAAqC;AACnCD,IAAAA,OAAO,CAACH,IAAR,eAAa;AAA+B,MAAA,KAAK,EAAEJ,IAAI,CAACQ,CAAD,CAAJ,CAAQ,OAAR,CAAtC;AAAA,gBAAyDR,IAAI,CAACQ,CAAD;AAA7D,OAAaR,IAAI,CAACQ,CAAD,CAAJ,CAAQ,OAAR,CAAb;AAAA;AAAA;AAAA;AAAA,YAAb;AACD;;AAED,sBACE;AAAA,4BACE;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,IAAI,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAU,MAAA,EAAE,EAAC,OAAb;AAAA,gBACGD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA1EM;;GAAMxB,U;;KAAAA,U","sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getDatabase, ref, onValue, get, child} from \"firebase/database\";\nimport React, {useEffect, useState} from 'react';\n\n\nexport const SearchView = (props) => {\n\n  const [db_data, set_db_data] = useState(() => null)\n\n  const firebaseConfig = {\n    apiKey: \"AIzaSyAQ6USPFRL3Uqps1aqErhcNyRlO2XblHj0\",\n    authDomain: \"interview-50399.firebaseapp.com\",\n    projectId: \"interview-50399\",\n    storageBucket: \"interview-50399.appspot.com\",\n    messagingSenderId: \"503019432099\",\n    appId: \"1:503019432099:web:9394f58478b734996db716\",\n    measurementId: \"G-C8XFN5VGFS\"\n  };\n\n  const app = initializeApp(firebaseConfig);\n  const database = getDatabase();\n\n\n  // let data = []\n  // let keys = []\n\n\n\n  // useEffect(() => {\n  //   const dbRef = ref(getDatabase());\n  //   get(child(dbRef, '/')).then((snapshot) => {\n  //     if (snapshot.exists()) {\n  //       snapshot.forEach((item, i) => {\n  //         let name = item.val()\n  //         keys.push(name)\n  //         console.log(name)\n  //       });\n  //       for (let i=0; i < keys.length; i++) {\n  //         data.push(keys[i]['First']);\n  //       }\n  //\n  //     } else {\n  //       console.log(\"No data available\");\n  //     }\n  //   }).catch((error) => {\n  //     console.error(error);\n  //   });\n  //   console.log(keys.length)\n  //   console.log(keys)\n  // }\n  db_data = []\n  useEffect(() => {\n    const dbRef = ref(getDatabase());\n    dbRef.on('value', (snapshot) => {\n      const data = snapshot.vals()\n      const list = []\n      for (let id in data){\n        list.push(data[id])\n      }\n      console.log(data)\n      set_db_data(data)\n    })\n  }, [])\n\n\n  let options = []\n\n  for (let i = 0; i < data.length; i++){\n    options.push(<option key={data[i]['First']} value={data[i]['First']}>{data[i]}</option>)\n  }\n\n  return (\n    <div>\n      <input list=\"users\" name=\"userSearch\"/>\n      <datalist id=\"users\">\n        {options}\n      </datalist>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}