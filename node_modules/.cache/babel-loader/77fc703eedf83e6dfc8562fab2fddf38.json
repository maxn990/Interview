{"ast":null,"code":"var _jsxFileName = \"/Users/maxnorman/Documents/Coding/Interview/interview/src/search.js\",\n    _s = $RefreshSig$();\n\nimport { initializeApp } from 'firebase/app';\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getDatabase, ref, onValue, get, child } from \"firebase/database\";\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SearchView = () => {\n  _s();\n\n  // create a variable for the database output\n  const [data, setData] = useState(() => null); // create a variable for the data + a setter\n\n  const [userOptions, setUserOptions] = useState(() => []); // blank variable to hold user input\n\n  const [name, setName] = useState(() => \"\"); // firebase config + app & db initialization\n\n  const firebaseConfig = {\n    apiKey: \"AIzaSyAQ6USPFRL3Uqps1aqErhcNyRlO2XblHj0\",\n    authDomain: \"interview-50399.firebaseapp.com\",\n    projectId: \"interview-50399\",\n    storageBucket: \"interview-50399.appspot.com\",\n    messagingSenderId: \"503019432099\",\n    appId: \"1:503019432099:web:9394f58478b734996db716\",\n    measurementId: \"G-C8XFN5VGFS\"\n  }; // firebase init\n\n  const app = initializeApp(firebaseConfig);\n  const database = getDatabase(); // get the data before the app loads and turn it into user options\n\n  useEffect(() => {\n    const dbRef = ref(getDatabase());\n    get(child(dbRef, '/')).then(snapshot => {\n      const data = snapshot.val();\n      const list = []; // get items from the database and store them in state\n\n      for (let id in data) {\n        list.push(data[id]);\n      }\n\n      setData(list); // create the options that are used for autosuggest look ahead and save them to state\n\n      let options = [];\n\n      for (let i = 0; i < list.length; i++) {\n        options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n          value: list[i]['First'],\n          children: list[i]['First']\n        }, list[i]['First'], false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 22\n        }, this));\n      }\n\n      setUserOptions(options); // error handling\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []); // redirects to the user's linkedin page\n\n  const redirect = event => {\n    event.preventDefault(); // checks if the user is in the database\n\n    for (let i = 0; i < data.length; i++) {\n      if (data[i]['First'] === name) {\n        // if so, redirect to their linkedin page\n        window.location.href = \"https://www.linkedin.com/in/\" + data[i]['Username'];\n      }\n    }\n  }; // render the form + options\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginTop: '2%',\n      borderRadius: '5px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: redirect,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        list: \"users\",\n        name: \"userSearch\",\n        value: name,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n        id: \"users\",\n        children: userOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        style: {\n          width: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchView, \"tFYP4OGaO5e2c5hN9Err98VFPjw=\");\n\n_c = SearchView;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchView\");","map":{"version":3,"sources":["/Users/maxnorman/Documents/Coding/Interview/interview/src/search.js"],"names":["initializeApp","getAnalytics","getDatabase","ref","onValue","get","child","React","useEffect","useState","SearchView","data","setData","userOptions","setUserOptions","name","setName","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","database","dbRef","then","snapshot","val","list","id","push","options","i","length","catch","error","console","redirect","event","preventDefault","window","location","href","display","justifyContent","alignItems","marginTop","borderRadius","e","target","value","width"],"mappings":"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","sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getDatabase, ref, onValue, get, child} from \"firebase/database\";\nimport React, {useEffect, useState} from 'react';\n\n\nexport const SearchView = () => {\n  // create a variable for the database output\n  const [data, setData] = useState(() => null)\n  // create a variable for the data + a setter\n  const [userOptions, setUserOptions] = useState(() => [])\n  // blank variable to hold user input\n  const [name, setName] = useState(() => \"\")\n\n  // firebase config + app & db initialization\n  const firebaseConfig = {\n    apiKey: \"AIzaSyAQ6USPFRL3Uqps1aqErhcNyRlO2XblHj0\",\n    authDomain: \"interview-50399.firebaseapp.com\",\n    projectId: \"interview-50399\",\n    storageBucket: \"interview-50399.appspot.com\",\n    messagingSenderId: \"503019432099\",\n    appId: \"1:503019432099:web:9394f58478b734996db716\",\n    measurementId: \"G-C8XFN5VGFS\"\n  };\n  // firebase init\n  const app = initializeApp(firebaseConfig);\n  const database = getDatabase();\n\n  // get the data before the app loads and turn it into user options\n  useEffect(() => {\n    const dbRef = ref(getDatabase());\n    get(child(dbRef, '/')).then((snapshot) => {\n      const data = snapshot.val()\n      const list = []\n      // get items from the database and store them in state\n      for (let id in data){\n        list.push(data[id])\n      }\n      setData(list)\n      // create the options that are used for autosuggest look ahead and save them to state\n      let options = []\n      for (let i = 0; i < list.length; i++){\n        options.push(<option key={list[i]['First']} value={list[i]['First']}>{list[i]['First']}</option>)\n      }\n      setUserOptions(options)\n      // error handling\n    }).catch((error) => {\n      console.error(error);\n    });\n  }, [])\n\n  // redirects to the user's linkedin page\n  const redirect = (event) => {\n    event.preventDefault();\n    // checks if the user is in the database\n    for (let i = 0; i < data.length; i++){\n      if (data[i]['First'] === name){\n        // if so, redirect to their linkedin page\n        window.location.href = \"https://www.linkedin.com/in/\" + data[i]['Username']\n      }\n    }\n  }\n\n  // render the form + options\n  return (\n    <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: '2%', borderRadius: '5px'}}>\n      <form onSubmit={redirect}>\n        <input list=\"users\" name=\"userSearch\" value={name} onChange={(e) => setName(e.target.value)}/>\n        <datalist id=\"users\">\n          {userOptions}\n        </datalist><br/>\n        <input type='submit' style={{width: '100%'}}/>\n      </form>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}