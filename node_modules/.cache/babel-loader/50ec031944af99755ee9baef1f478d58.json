{"ast":null,"code":"var _jsxFileName = \"/Users/maxnorman/Documents/Coding/Interview/interview/src/search.js\";\nimport { initializeApp } from 'firebase/app';\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getDatabase, ref, onValue, get, child } from \"firebase/database\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SearchView = props => {\n  const firebaseConfig = {\n    apiKey: \"AIzaSyAQ6USPFRL3Uqps1aqErhcNyRlO2XblHj0\",\n    authDomain: \"interview-50399.firebaseapp.com\",\n    projectId: \"interview-50399\",\n    storageBucket: \"interview-50399.appspot.com\",\n    messagingSenderId: \"503019432099\",\n    appId: \"1:503019432099:web:9394f58478b734996db716\",\n    measurementId: \"G-C8XFN5VGFS\"\n  };\n  const app = initializeApp(firebaseConfig);\n  const database = getDatabase();\n  let data = [];\n  let keys = [];\n  const dbRef = ref(getDatabase());\n  get(child(dbRef, '/')).then(snapshot => {\n    if (snapshot.exists()) {\n      snapshot.forEach((item, i) => {\n        let name = item.val()[0]['First'];\n      });\n    } else {\n      console.log(\"No data available\");\n    }\n  }).catch(error => {\n    console.error(error);\n  });\n  console.log(keys);\n  let options = [];\n\n  for (let i = 0; i < data.length; i++) {\n    options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n      value: data[i]['First'],\n      children: data[i]\n    }, data[i]['First'], false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 18\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      list: \"users\",\n      name: \"userSearch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: \"users\",\n      children: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_c = SearchView;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchView\");","map":{"version":3,"sources":["/Users/maxnorman/Documents/Coding/Interview/interview/src/search.js"],"names":["initializeApp","getAnalytics","getDatabase","ref","onValue","get","child","SearchView","props","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","database","data","keys","dbRef","then","snapshot","exists","forEach","item","i","name","val","console","log","catch","error","options","length","push"],"mappings":";AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,WAAT,EAAsBC,GAAtB,EAA2BC,OAA3B,EAAoCC,GAApC,EAAyCC,KAAzC,QAAqD,mBAArD;;AAGA,OAAO,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAEnC,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,yCADa;AAErBC,IAAAA,UAAU,EAAE,iCAFS;AAGrBC,IAAAA,SAAS,EAAE,iBAHU;AAIrBC,IAAAA,aAAa,EAAE,6BAJM;AAKrBC,IAAAA,iBAAiB,EAAE,cALE;AAMrBC,IAAAA,KAAK,EAAE,2CANc;AAOrBC,IAAAA,aAAa,EAAE;AAPM,GAAvB;AAUA,QAAMC,GAAG,GAAGjB,aAAa,CAACS,cAAD,CAAzB;AACA,QAAMS,QAAQ,GAAGhB,WAAW,EAA5B;AAEA,MAAIiB,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,QAAMC,KAAK,GAAGlB,GAAG,CAACD,WAAW,EAAZ,CAAjB;AACAG,EAAAA,GAAG,CAACC,KAAK,CAACe,KAAD,EAAQ,GAAR,CAAN,CAAH,CAAuBC,IAAvB,CAA6BC,QAAD,IAAc;AACxC,QAAIA,QAAQ,CAACC,MAAT,EAAJ,EAAuB;AACrBD,MAAAA,QAAQ,CAACE,OAAT,CAAiB,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC5B,YAAIC,IAAI,GAAGF,IAAI,CAACG,GAAL,GAAW,CAAX,EAAc,OAAd,CAAX;AACD,OAFD;AAID,KALD,MAKO;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;AACF,GATD,EASGC,KATH,CASUC,KAAD,IAAW;AAClBH,IAAAA,OAAO,CAACG,KAAR,CAAcA,KAAd;AACD,GAXD;AAYAH,EAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;AACA,MAAIc,OAAO,GAAG,EAAd;;AAEA,OAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAAI,CAACgB,MAAzB,EAAiCR,CAAC,EAAlC,EAAqC;AACnCO,IAAAA,OAAO,CAACE,IAAR,eAAa;AAA+B,MAAA,KAAK,EAAEjB,IAAI,CAACQ,CAAD,CAAJ,CAAQ,OAAR,CAAtC;AAAA,gBAAyDR,IAAI,CAACQ,CAAD;AAA7D,OAAaR,IAAI,CAACQ,CAAD,CAAJ,CAAQ,OAAR,CAAb;AAAA;AAAA;AAAA;AAAA,YAAb;AACD;;AAED,sBACE;AAAA,4BACE;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,IAAI,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAU,MAAA,EAAE,EAAC,OAAb;AAAA,gBACGO;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA7CM;KAAM3B,U","sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getDatabase, ref, onValue, get, child} from \"firebase/database\";\n\n\nexport const SearchView = (props) => {\n\n  const firebaseConfig = {\n    apiKey: \"AIzaSyAQ6USPFRL3Uqps1aqErhcNyRlO2XblHj0\",\n    authDomain: \"interview-50399.firebaseapp.com\",\n    projectId: \"interview-50399\",\n    storageBucket: \"interview-50399.appspot.com\",\n    messagingSenderId: \"503019432099\",\n    appId: \"1:503019432099:web:9394f58478b734996db716\",\n    measurementId: \"G-C8XFN5VGFS\"\n  };\n\n  const app = initializeApp(firebaseConfig);\n  const database = getDatabase();\n\n  let data = []\n  let keys = []\n  const dbRef = ref(getDatabase());\n  get(child(dbRef, '/')).then((snapshot) => {\n    if (snapshot.exists()) {\n      snapshot.forEach((item, i) => {\n        let name = item.val()[0]['First']\n      });\n\n    } else {\n      console.log(\"No data available\");\n    }\n  }).catch((error) => {\n    console.error(error);\n  });\n  console.log(keys)\n  let options = []\n\n  for (let i = 0; i < data.length; i++){\n    options.push(<option key={data[i]['First']} value={data[i]['First']}>{data[i]}</option>)\n  }\n\n  return (\n    <div>\n      <input list=\"users\" name=\"userSearch\"/>\n      <datalist id=\"users\">\n        {options}\n      </datalist>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}